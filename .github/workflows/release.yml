name: Release Library

on:
  workflow_call:
    inputs:
      project_path:
        description: The relative path to the project
        required: true
        type: string

      project_name:
        description: The project name
        required: true
        type: string

    secrets:
      nuget_api_key:
        description: NuGet.org API key with permissions to upload the created NuGet package
        required: true

    outputs:
      major_version:
        description: SemVer Major version
        value: ${{ jobs.release.outputs.major_version }}
      minor_version:
        description: SemVer Minor version
        value: ${{ jobs.release.outputs.minor_version }}
      patch_version:
        description: SemVer Patch version
        value: ${{ jobs.release.outputs.patch_version }}
      release_tag:
        description: The release tag
        value: ${{ jobs.release.outputs.release_tag }}
      release_url:
        description: The url to the Github release
        value: ${{ jobs.release.outputs.release_url }}
      nuget_package_url:
        description: The url to the uploaded NuGet package
        value: ${{ jobs.release.outputs.nuget_package_url }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions: 
      # Create release and tags
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0

      - name: Determine Release Versioning
        id: versioning
        uses: Fresa/trunk-based-release-versioning@v0

      - name: Determine Release Version
        id: release-tag
        run: |
          version=${{ steps.versioning.outputs.version }}
          if ${{ steps.versioning.outputs.is-prerelease }}; then
            version="$version-pre-$(echo ${{ steps.versioning.outputs.release-ref }} | cut -c1-8)"
          fi

          echo "tag=v$version" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Convert Commit Logs to JSON
        id: convert-commit-logs
        uses: mikefarah/yq@v4.30.6
        with:
          cmd: yq ea -o=json 'select(. != null) | [.]' "$(echo "${{ steps.versioning.outputs.commit-logs-path }}" | sed "s|^${{ github.workspace }}/||")" | tee commit_logs.json

      - name: Generate Release Notes
        id: release_notes
        uses: Fresa/release-notes-generator@v2
        with:
          version: ${{ steps.release-tag.outputs.tag }}
          last_release_ref: ${{ steps.versioning.outputs.last-release-ref }}
          release_ref: ${{ steps.versioning.outputs.release-ref }}
          path_to_commits: ./commit_logs.json

      - name: Write Release Notes to File
        run: | 
          echo "${{ steps.release_notes.outputs.release_notes }}" > "${{ inputs.project_path }}/release_notes.txt"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Read package id
        id: package-id
        uses: mikefarah/yq@v4.30.6
        with:
          cmd: yq --input-format xml '.Project.PropertyGroup.PackageId' ${{ inputs.project_path }}/${{ inputs.project_name }}.csproj

      - name: Pack
        run: | 
          dotnet pack ${{ inputs.project_path }}/${{ inputs.project_name }}.csproj \
            -c Release \
            -o nuget-packages \
            -p:PackageVersion=${{ steps.release-tag.outputs.version }} \
            -p:InformationalVersion=${{ steps.release-tag.outputs.version }} \
            -p:AssemblyVersion=${{ steps.versioning.outputs.major-version }}.0.0.0 \
            -p:FileVersion=${{ steps.versioning.outputs.version }}.0 \
            -p:ContinuousIntegrationBuild=true

      - name: Create Tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.release-tag.outputs.tag }}",
              sha: "${{ steps.versioning.outputs.release-ref }}"
            });

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.txt
          tag_name: ${{ steps.release-tag.outputs.tag }}
          prerelease: ${{ steps.versioning.outputs.is-prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Latest Minor Tag
        uses: EndBug/latest-tag@v1
        if: steps.versioning.outputs.is-prerelease == 'false'
        with:
          ref: v${{ steps.versioning.outputs.major-version }}
          description: ${{ steps.release-tag.outputs.tag }}

      - name: Update Latest Patch Tag
        uses: EndBug/latest-tag@v1
        if: steps.versioning.outputs.is-prerelease == 'false'
        with:
          ref: v${{ steps.versioning.outputs.major-version }}.${{ steps.versioning.outputs.minor-version }}
          description: ${{ steps.release-tag.outputs.tag }}

      - name: Publish to nuget.org
        run: |
          dotnet nuget push nuget-packages/${{ steps.package-id.outputs.result }}.${{ steps.release-tag.outputs.version }}.nupkg \
            --api-key ${{ secrets.nuget_api_key }} \
            --source https://api.nuget.org/v3/index.json

    outputs:
      major_version: ${{ steps.versioning.outputs.major-version }}
      minor_version: ${{ steps.versioning.outputs.minor-version }}
      patch_version: ${{ steps.versioning.outputs.patch-version }}
      release_tag: ${{ steps.release-tag.outputs.tag }}
      release_url: ${{ steps.release.outputs.url }}
      nuget_package_url: https://www.nuget.org/packages/${{ steps.package-id.outputs.result }}/${{ steps.release-tag.outputs.version }}